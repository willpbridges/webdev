{"version":3,"sources":["game.js","App.js","reportWebVitals.js","index.js"],"names":["uniq","xs","Array","from","Set","not_unique","text","sorted_nums","sort","get_number","solution","length","digit","Math","floor","random","includes","toString","get_bulls","secret","guess","bulls","i","charAt","get_cows","cows","bad_guesses","guesses","bads","gg","curr","parseInt","isNaN","push","Victory","reset","className","onClick","GameOver","App","useState","_setSecret","setGuesses","setText","message","setMessage","lives","lives_left","fullGuesses","get_message","ng","concat","href","type","maxLength","value","onChange","ev","vv","target","onKeyPress","key","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e662082.chunk.js","sourcesContent":["/**\n * I used Prof. Tuck's Hangman lecture code as a starting point.\n * I left some of his code here, such as uniq() and lives_left(), but I had\n * to write a lot of new code to program the necessary logic for Bulls and Cows.\n */\nexport function uniq(xs) {\n    return Array.from(new Set(xs));\n}\n\nfunction not_unique(text) {\n    let nums = Array.from(text);\n    let sorted_nums = nums.sort();\n    return sorted_nums[0] === sorted_nums[1] ||\n        sorted_nums[1] === sorted_nums[2] ||\n        sorted_nums[2] === sorted_nums[3];\n}\n\nexport function get_message(text) {\n    let message = \"\";\n    if (isNaN(parseInt(text))) {\n        message = \"Error: Must enter a 4-digit number\";\n    } else if (text.length < 4) {\n        message = \"Error: Number is less than 4 digits\";\n    } else if (not_unique(text)) {\n        message = \"Error: All 4 digits must be unique\";\n    } else {\n        message = \"Enter a unique 4-digit number\";\n    }\n    return message;\n}\n\nexport function get_number() {\n    let solution = \"\";\n    while (solution.length < 4) {\n        let digit = Math.floor((Math.random() * 10));\n        while (!solution.includes(digit.toString())) {\n            solution += digit.toString();\n        }\n    }\n    return solution;\n}\n\nexport function word_view(secret, guesses) {\n    let view = [];\n    for (let cc of secret.split('')) {\n        if (guesses.includes(cc)) {\n            view.push(cc);\n        }\n        else {\n            view.push(\"_\");\n        }\n    }\n    return view;\n}\n\nexport function get_bulls(secret, guess) {\n    let bulls = 0;\n    for (let i = 0; i < 4; i++) {\n        if (guess.charAt(i) === secret.charAt(i)) {\n            bulls++;\n        }\n    }\n    return bulls;\n}\n\nexport function get_cows(secret, guess) {\n    let cows = 0;\n    for (let i = 0; i < 4; i++) {\n        if (secret.includes(guess.charAt(i))) {\n            cows++;\n        }\n    }\n    cows -= get_bulls(secret, guess);\n    return cows;\n}\n\nexport function bad_guesses(secret, guesses) {\n    let bads = [];\n    for (let gg in guesses) {\n        let curr = guesses[gg];\n        if (parseInt(secret) !== parseInt(curr)) {\n            if (!isNaN(parseInt(curr)) && curr.length === 4 && !not_unique(curr)) {\n                bads.push(guesses[gg]);\n            }\n        }\n    }\n    return uniq(bads);\n}\n\nexport function lives_left(secret, guesses) {\n    return 8 - bad_guesses(secret, guesses).length;\n}\n","/**\n * I used Prof. Tuck's Hangman lecture code as a starting point.\n * Most of the basic functions are taken from that code, but all\n * the new logic required for Cows and Bulls is original code.\n * For example, large portions of App() are the same as in the\n * original code, but I had to make changes in how guesses are\n * handled and how text is rendered. I also had to write my own\n * function for randomly generating a 4-digit number and\n * storing it in state.\n */\nimport { useState } from 'react';\nimport {\n  uniq, bad_guesses, word_view, lives_left, \n  get_number, get_message, get_bulls, get_cows\n} from './game';\nimport './App.css';\n\nfunction Victory({ reset }) {\n  return (\n    <div className=\"App\">\n      <h1>You win!</h1>\n      <p>\n        <button onClick={reset}>\n          Reset\n        </button>\n      </p>\n    </div>\n  );\n}\n\nfunction GameOver({ reset }) {\n  return (\n    <div className=\"App\">\n      <h1>Game Over!</h1>\n      <p>\n        <button onClick={reset}>\n          Reset\n        </button>\n      </p>\n    </div>\n  );\n}\n\nfunction App() {\n\n  const solution = get_number();\n  const [secret, _setSecret] = useState(solution);\n\n  const [guesses, setGuesses] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [message, setMessage] = useState(\"Enter a unique 4-digit number\");\n\n  let bads = bad_guesses(secret, guesses);\n  let lives = lives_left(secret, guesses);\n  let fullGuesses = []\n  \n  for (let i = 0; i < bads.length; i++) {\n    fullGuesses.push(\n      \"\" + bads[i] + \n      \" | Bulls: \" + get_bulls(bads[i], secret) + \n      \", Cows: \" + get_cows(bads[i], secret)\n    )\n  }\n\n  function updateText(ev) {\n    let vv = ev.target.value;\n    setText(vv);\n  }\n\n  function guess() {\n    setText(\"\");\n    setMessage(get_message(text));\n    let ng = uniq(guesses.concat(text));\n    setGuesses(ng);\n  }\n\n  function keyPress(ev) {\n    if (ev.key == \"Enter\") {\n      guess();\n    }\n  }\n\n  if (lives <= 0) {\n    return <GameOver reset={\n      () => {\n        setGuesses([]);\n        const solution = get_number();\n        _setSecret(solution);\n        setMessage(\"Enter a unique 4-digit number\");\n      }\n    } />;\n  }\n\n  if (guesses.length > 0) {\n    if (get_bulls(secret, guesses[guesses.length - 1]) === 4) {\n      return <Victory reset={\n        () => {\n          setGuesses([]);\n          const solution = get_number();\n          _setSecret(solution);\n          setMessage(\"Enter a unique 4-digit number\");\n        }\n      } />;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>\n        <a href=\"http://willbridges.website\">Home</a>\n      </h1>\n      <h1>{message}</h1>\n      <p>\n        <input type=\"text\"\n          maxLength=\"4\"\n          value={text}\n          onChange={updateText}\n          onKeyPress={keyPress} />\n        <button onClick={guess}>Guess</button>\n      </p>\n      <p>\n        <button onClick={\n          () => {\n            setText(\"\");\n            setGuesses([]);\n            const solution = get_number();\n            _setSecret(solution);\n            setMessage(\"Enter a unique 4-digit number\");\n          }\n        }>\n          Reset\n        </button>\n      </p>\n      <h1>Lives: {lives + '\\r\\n'}</h1>\n      <h1>Guesses: {\"\\r\\n\" + fullGuesses.join(\"\\r\\n\")}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}